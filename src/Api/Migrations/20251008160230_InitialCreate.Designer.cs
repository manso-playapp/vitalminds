// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VitalMinds.Clinic.Api.Data;

#nullable disable

namespace VitalMinds.Clinic.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251008160230_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Diff")
                        .HasColumnType("jsonb");

                    b.Property<string>("Entidad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntidadId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ip")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Episode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FechasHitos")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Notas")
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponsableId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Extraction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Evidencias")
                        .HasColumnType("jsonb");

                    b.Property<string>("ExtraccionistaId")
                        .HasColumnType("text");

                    b.Property<string>("ExtraccionistaUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<string>("Franja")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId")
                        .IsUnique();

                    b.HasIndex("ExtraccionistaId");

                    b.ToTable("Extractions");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.FinanceLedger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fase")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("Fecha")
                        .HasColumnType("date");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("FinanceLedgers");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Activa")
                        .HasColumnType("boolean");

                    b.Property<string>("AliasCBU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Banco")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CBU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CUIT")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CondicionIVA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EsProfesionalIndependiente")
                        .HasColumnType("boolean");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CUIT")
                        .IsUnique();

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.IntegratedReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirmadoPorId")
                        .HasColumnType("text");

                    b.Property<string>("FirmadoPorUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoInforme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("FirmadoPorId");

                    b.ToTable("IntegratedReports");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.LabResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnviadoPaciente")
                        .HasColumnType("boolean");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FacturadoObraSocial")
                        .HasColumnType("boolean");

                    b.Property<bool>("Firmado")
                        .HasColumnType("boolean");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Proveedor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Valores")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("LabResults");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.MedicalOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Destino")
                        .HasColumnType("integer");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirmanteId")
                        .HasColumnType("text");

                    b.Property<string>("FirmanteUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId")
                        .IsUnique();

                    b.HasIndex("FirmanteId");

                    b.ToTable("MedicalOrders");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Canal")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToEmail")
                        .HasColumnType("text");

                    b.Property<string>("ToPhone")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Parameters", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CatalogoEstudios")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Plantillas")
                        .HasColumnType("jsonb");

                    b.Property<string>("SLAs")
                        .HasColumnType("jsonb");

                    b.Property<string>("TestsHabilitados")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId")
                        .IsUnique();

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<bool>("Consentimiento")
                        .HasColumnType("boolean");

                    b.Property<string>("ContactoAlternativo")
                        .HasColumnType("text");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)");

                    b.Property<string>("NumeroAfiliado")
                        .HasColumnType("text");

                    b.Property<string>("Prepaga")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DNI")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Checklist")
                        .HasColumnType("jsonb");

                    b.Property<int>("Clasificacion")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExtractionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rotulo")
                        .HasColumnType("text");

                    b.Property<decimal?>("Temperatura")
                        .HasColumnType("numeric");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Destino")
                        .HasColumnType("integer");

                    b.Property<string>("Empresa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Etiquetas")
                        .HasColumnType("jsonb");

                    b.Property<string>("Evidencias")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ExtractionId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("FechaEnvio")
                        .HasColumnType("date");

                    b.Property<string>("NumeroGuia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ExtractionId");

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TestCatalog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TestCatalogs");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Interpretacion")
                        .HasColumnType("text");

                    b.Property<string>("PdfPath")
                        .HasColumnType("text");

                    b.Property<string>("Puntajes")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("TestCatalogId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ValorConfig")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("TestCatalogId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TherapyProposal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Aceptada")
                        .HasColumnType("boolean");

                    b.Property<string>("Detalles")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Enviados")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ValorConfig")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("TherapyProposals");
                });

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Episode", b =>
                {
                    b.HasOne("ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Institution", "Institution")
                        .WithMany("Episodes")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Patient", "Patient")
                        .WithMany("Episodes")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Institution");

                    b.Navigation("Patient");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Extraction", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithOne("Extraction")
                        .HasForeignKey("VitalMinds.Clinic.Api.Domain.Entities.Extraction", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Extraccionista")
                        .WithMany()
                        .HasForeignKey("ExtraccionistaId");

                    b.Navigation("Episode");

                    b.Navigation("Extraccionista");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.FinanceLedger", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany("FinanceLedgers")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.IntegratedReport", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany("IntegratedReports")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "FirmadoPor")
                        .WithMany()
                        .HasForeignKey("FirmadoPorId");

                    b.Navigation("Episode");

                    b.Navigation("FirmadoPor");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.LabResult", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany("LabResults")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.MedicalOrder", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithOne("MedicalOrder")
                        .HasForeignKey("VitalMinds.Clinic.Api.Domain.Entities.MedicalOrder", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", "Firmante")
                        .WithMany()
                        .HasForeignKey("FirmanteId");

                    b.Navigation("Episode");

                    b.Navigation("Firmante");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Notification", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ApplicationUser", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.Navigation("Episode");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Parameters", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Institution", "Institution")
                        .WithOne("Parameters")
                        .HasForeignKey("VitalMinds.Clinic.Api.Domain.Entities.Parameters", "InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Patient", b =>
                {
                    b.HasOne("ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Institution", null)
                        .WithMany("Patients")
                        .HasForeignKey("InstitutionId");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Sample", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Extraction", "Extraction")
                        .WithMany("Samples")
                        .HasForeignKey("ExtractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extraction");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Extraction", "Extraction")
                        .WithMany("Shipments")
                        .HasForeignKey("ExtractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Extraction");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany("TestResults")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.TestCatalog", "TestCatalog")
                        .WithMany("TestResults")
                        .HasForeignKey("TestCatalogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("TestCatalog");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TherapyProposal", b =>
                {
                    b.HasOne("VitalMinds.Clinic.Api.Domain.Entities.Episode", "Episode")
                        .WithMany("TherapyProposals")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Episode", b =>
                {
                    b.Navigation("Extraction");

                    b.Navigation("FinanceLedgers");

                    b.Navigation("IntegratedReports");

                    b.Navigation("LabResults");

                    b.Navigation("MedicalOrder");

                    b.Navigation("TestResults");

                    b.Navigation("TherapyProposals");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Extraction", b =>
                {
                    b.Navigation("Samples");

                    b.Navigation("Shipments");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Institution", b =>
                {
                    b.Navigation("Episodes");

                    b.Navigation("Parameters");

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("VitalMinds.Clinic.Api.Domain.Entities.TestCatalog", b =>
                {
                    b.Navigation("TestResults");
                });
#pragma warning restore 612, 618
        }
    }
}
